
#include <Adafruit_GFX.h>
#include <Adafruit_NeoMatrix.h>
#include <Adafruit_NeoPixel.h>
#ifndef PSTR
#define PSTR // Make Arduino Due happy
#endif

#define PIN 14

const long Ralph[] PROGMEM =
{
  0x00, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xf7, 0xfb, 0xff, 0xf7, 0xfb, 0xff, 0xff, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xff, 0xee, 0xe9, 0xf2, 0xc0, 0xf2, 0xf7, 0xe5, 0xfb, 0xff, 0xff, 0x00, 0x00,
  0x00, 0xff, 0xf7, 0xe9, 0xe9, 0xe0, 0xe1, 0xe5, 0xe9, 0xe5, 0xe5, 0xee, 0xfb, 0xff, 0x00, 0x00,
  0x00, 0xff, 0xf7, 0xe5, 0xe0, 0xc1, 0xc0, 0xc0, 0xc0, 0xe5, 0xe0, 0xe9, 0xf7, 0xff, 0x00, 0x00,
  0x00, 0xfb, 0xe9, 0xe5, 0xe1, 0xe9, 0xee, 0xee, 0xee, 0xe5, 0xe1, 0xe5, 0xe9, 0xff, 0x00, 0x00,
  0x00, 0xff, 0xfb, 0xe5, 0xe5, 0xcd, 0xf6, 0xfb, 0xd2, 0xcd, 0xe5, 0xe9, 0xff, 0xff, 0x00, 0x00,
  0x00, 0xff, 0xee, 0xc5, 0xc9, 0xd6, 0xd2, 0xce, 0xd2, 0xd2, 0xe5, 0xe9, 0xf2, 0xff, 0x00, 0x00,
  0x00, 0xfb, 0xf2, 0xf2, 0xe9, 0xff, 0xb7, 0xd2, 0xdf, 0xfb, 0xc5, 0xf6, 0xf2, 0xff, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xf2, 0xee, 0xfb, 0xa9, 0xc9, 0xd2, 0xfb, 0xe9, 0xf6, 0xff, 0xff, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xce, 0xf6, 0xfb, 0xee, 0xe9, 0xf2, 0xfb, 0xf2, 0xd2, 0xff, 0xff, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xfb, 0xd6, 0xd7, 0xff, 0xfb, 0xfb, 0xd2, 0xf6, 0xfb, 0xff, 0xff, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xfb, 0x8e, 0xff, 0xff, 0xff, 0xff, 0xb7, 0x8d, 0xff, 0xff, 0xff, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xd6, 0x8e, 0xff, 0xff, 0xff, 0xff, 0xff, 0x49, 0xfb, 0xff, 0xff, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xfb, 0xb2, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8d, 0xff, 0xff, 0xff, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xff, 0xfb, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
};

Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(16, 16, PIN,
                            NEO_MATRIX_BOTTOM     + NEO_MATRIX_RIGHT +
                            NEO_MATRIX_COLUMNS + NEO_MATRIX_ZIGZAG,
                            NEO_GRB            + NEO_KHZ800);

void setup() {
  Serial.begin(9600);
  matrix.begin();
  matrix.setBrightness(40);
}

void display_ralph() {
  matrix.clear();
  for (int i = 0; i < 16; i++) {
    for (int j = 0; j < 16; j++) {
//      struct RGB c = colorConverter(pgm_read_dword(&(DigDug01[16 * i + j])));
//      uint16_t c_u = matrix.Color(c.r, c.g, c.b);
//      Serial.println(c.r);
      matrix.drawPixel(j, i, pgm_read_dword(&(Ralph[16 * i + j])));
    }
  }
  matrix.show();
  delay(500);
}

void loop() {
  // put your main code here, to run repeatedly:
  display_ralph();
}
